# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Comment {
  childComments: [Comment!]!
  commentId: ID!
  content: String!
  createdAt: Long!
  parentId: ID!
  replyTo: ID
  replyToComment: Comment
  updatedAt: Long!
  user: User!
  userId: ID!
  votes: [Vote!]!
}

input CreateCommentInput {
  content: String!
  parentId: ID!
  replyTo: ID
}

input CreateCommentVoteInput {
  commentId: ID!
  parentId: ID!
  type: VoteType!
}

input CreateQuestionBaseInput {
  correctOptions: [String!]!
  options: [String!]!
  point: Int! = 1
  prompt: String!
  timeLimit: Int! = 60
}

input CreateQuestionInput {
  correctOptions: [String!]!
  options: [String!]!
  point: Int! = 1
  prompt: String!
  quizId: ID!
  timeLimit: Int! = 60
}

input CreateQuizInput {
  level: String!
  name: String!
  passScore: Float! = 70
  questions: [CreateQuestionBaseInput!]
  tags: [String!]! = []
  topic: String!
}

input CreateQuizVoteInput {
  creatorId: ID!
  quizId: ID!
  type: VoteType!
}

input CreateUserInput {
  email: String!
  password: String!
  picture: String
  username: String!
}

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

type Mutation {
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createQuestion(createQuestionInput: CreateQuestionInput!): Question!
  createQuestions(createQuestionInputs: [CreateQuestionInput!]!): [Question!]!
  createQuiz(createQuizInput: CreateQuizInput!): Quiz!
  createUser(createUserInput: CreateUserInput!): User!
  removeComment(commentId: String!, parentId: String!): Comment!
  removeQuestion(questionId: String!, quizId: String!): Question!
  removeQuiz(quizId: String!): Quiz!
  removeUser(id: String!): User!
  signIn(signInInput: SignInInput!): SignInResponse!
  signUp(signUpInput: SignUpInput!): User!
  submitQuizAttempt(quizAttemptInput: QuizAttemptInput!): QuizAttempt!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  updateQuestion(updateQuestionInput: UpdateQuestionInput!): Question!
  updateQuiz(updateQuizInput: UpdateQuizInput!): Quiz!
  updateUser(updateUserInput: UpdateUserInput!): User!
  voteComment(createVoteInput: CreateCommentVoteInput!): Comment!
  voteQuiz(createVoteInput: CreateQuizVoteInput!): Quiz!
}

type Query {
  comment(commentId: String!, parentId: String!): Comment!
  questionsByQuiz(quizId: String!): [Question!]!
  quiz(creatorId: String!, quizId: String!): Quiz!
  quizAttempt(quizId: String!, userId: String!): QuizAttempt!
  quizAttemptsByQuiz(quizId: String!): [QuizAttempt!]!
  quizAttemptsByUser(userId: String!): [QuizAttempt!]!
  quizzes: [Quiz!]!
  quizzesByCreator(creatorId: String!): [Quiz!]!
  user(id: String!): User!
  users: [User!]!
}

type Question {
  correctOptions: [String!]!
  createdAt: Long!
  options: [String!]!
  point: Int!
  prompt: String!
  questionId: ID!
  quizId: ID!
  timeLimit: Int!
  updatedAt: Long!
}

type QuestionAttempt {
  correctOptions: [String!]!
  createdAt: Long!
  options: [String!]!
  point: Int!
  prompt: String!
  questionId: ID!
  selectedOptions: [String!]!
}

input QuestionAttemptInput {
  questionId: ID!
  selectedOptions: [String!]!
}

type Quiz {
  comments: [Comment!]!
  createdAt: Long!
  creator: User!
  creatorId: ID!
  level: String!
  name: String!
  passScore: Int!
  questions: [Question!]!

  """ID of the quiz"""
  quizId: ID!
  tags: [String!]!
  topic: String!
  updatedAt: Long!
  votes: [Vote!]!
}

type QuizAttempt {
  answers: [QuestionAttempt!]!
  creatorId: ID!
  pass: Boolean!
  quiz: Quiz!
  quizId: ID!
  score: Int!
  scorePercentage: Float!
  timestamp: Long!
  user: User!
  userId: ID!
}

input QuizAttemptInput {
  answers: [QuestionAttemptInput!]!
  creatorId: ID!
  quizId: ID!
}

input SignInInput {
  password: String!
  username: String!
}

type SignInResponse {
  access_token: String!
  user: User!
}

input SignUpInput {
  email: String!
  password: String!
  username: String!
}

input UpdateCommentInput {
  commentId: ID!
  content: String!
  parentId: ID!
  replyTo: ID
}

input UpdateQuestionInput {
  correctOptions: [String!]
  options: [String!]
  point: Int = 1
  prompt: String
  questionId: String!
  quizId: ID
  timeLimit: Int = 60
}

input UpdateQuizInput {
  level: String
  name: String
  passScore: Float = 70
  questions: [CreateQuestionBaseInput!]
  quizId: String!
  tags: [String!] = []
  topic: String
}

input UpdateUserInput {
  description: String
  displayName: String
  password: String
  picture: String
  userId: String!
  username: String
}

type User {
  createdAt: Long
  description: String
  displayName: String!
  email: String!
  picture: String
  provider: String
  sub: String
  updatedAt: Long

  """ID of the user"""
  userId: String!
  username: String!
}

type Vote {
  """Vote type"""
  type: String!

  """ID of the user"""
  userId: ID!
}

enum VoteType {
  DOWN
  UP
}